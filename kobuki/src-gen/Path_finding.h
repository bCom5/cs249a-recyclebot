/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef PATH_FINDING_H_
#define PATH_FINDING_H_

#include "../platform_kobuki.h"
#include "../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'path_finding'.
*/

/*! Define number of states in the state enum */

#define PATH_FINDING_STATE_COUNT 2

/*! Define dimension of the state configuration vector for orthogonal states. */
#define PATH_FINDING_MAX_ORTHOGONAL_STATES 1


/*! Define indices of states in the StateConfVector */
#define SCVI_PATH_FINDING_MAIN_REGION_STATION 0
#define SCVI_PATH_FINDING_MAIN_REGION_FOLLOWING 0

/*! Enumeration of all states */ 
typedef enum
{
	Path_finding_last_state,
	Path_finding_main_region_Station,
	Path_finding_main_region_Following
} Path_findingStates;







/*! Type definition of the data structure for the Path_findingIface interface scope. */
typedef struct
{
	int32_t inv_Kp;
	int32_t inv_Kd;
	int32_t error;
	int32_t last_error;
	int32_t turn_speed;
	int16_t base_speed;
	int16_t speed_left;
	int16_t speed_right;
	sc_boolean has_vec;
	uint8_t v_start_x;
	uint8_t v_start_y;
	uint8_t v_end_x;
	uint8_t v_end_y;
} Path_findingIface;




/*! 
 * Type definition of the data structure for the Path_finding state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	Path_findingStates stateConfVector[PATH_FINDING_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	Path_findingIface iface;
} Path_finding;



/*! Initializes the Path_finding state machine data structures. Must be called before first usage.*/
extern void path_finding_init(Path_finding* handle);

/*! Activates the state machine */
extern void path_finding_enter(Path_finding* handle);

/*! Deactivates the state machine */
extern void path_finding_exit(Path_finding* handle);

/*! Performs a 'run to completion' step. */
extern void path_finding_runCycle(Path_finding* handle);


/*! Gets the value of the variable 'inv_Kp' that is defined in the default interface scope. */ 
extern int32_t path_findingIface_get_inv_Kp(const Path_finding* handle);
/*! Sets the value of the variable 'inv_Kp' that is defined in the default interface scope. */ 
extern void path_findingIface_set_inv_Kp(Path_finding* handle, int32_t value);
/*! Gets the value of the variable 'inv_Kd' that is defined in the default interface scope. */ 
extern int32_t path_findingIface_get_inv_Kd(const Path_finding* handle);
/*! Sets the value of the variable 'inv_Kd' that is defined in the default interface scope. */ 
extern void path_findingIface_set_inv_Kd(Path_finding* handle, int32_t value);
/*! Gets the value of the variable 'error' that is defined in the default interface scope. */ 
extern int32_t path_findingIface_get_error(const Path_finding* handle);
/*! Sets the value of the variable 'error' that is defined in the default interface scope. */ 
extern void path_findingIface_set_error(Path_finding* handle, int32_t value);
/*! Gets the value of the variable 'last_error' that is defined in the default interface scope. */ 
extern int32_t path_findingIface_get_last_error(const Path_finding* handle);
/*! Sets the value of the variable 'last_error' that is defined in the default interface scope. */ 
extern void path_findingIface_set_last_error(Path_finding* handle, int32_t value);
/*! Gets the value of the variable 'turn_speed' that is defined in the default interface scope. */ 
extern int32_t path_findingIface_get_turn_speed(const Path_finding* handle);
/*! Sets the value of the variable 'turn_speed' that is defined in the default interface scope. */ 
extern void path_findingIface_set_turn_speed(Path_finding* handle, int32_t value);
/*! Gets the value of the variable 'base_speed' that is defined in the default interface scope. */ 
extern int16_t path_findingIface_get_base_speed(const Path_finding* handle);
/*! Sets the value of the variable 'base_speed' that is defined in the default interface scope. */ 
extern void path_findingIface_set_base_speed(Path_finding* handle, int16_t value);
/*! Gets the value of the variable 'speed_left' that is defined in the default interface scope. */ 
extern int16_t path_findingIface_get_speed_left(const Path_finding* handle);
/*! Sets the value of the variable 'speed_left' that is defined in the default interface scope. */ 
extern void path_findingIface_set_speed_left(Path_finding* handle, int16_t value);
/*! Gets the value of the variable 'speed_right' that is defined in the default interface scope. */ 
extern int16_t path_findingIface_get_speed_right(const Path_finding* handle);
/*! Sets the value of the variable 'speed_right' that is defined in the default interface scope. */ 
extern void path_findingIface_set_speed_right(Path_finding* handle, int16_t value);
/*! Gets the value of the variable 'has_vec' that is defined in the default interface scope. */ 
extern sc_boolean path_findingIface_get_has_vec(const Path_finding* handle);
/*! Sets the value of the variable 'has_vec' that is defined in the default interface scope. */ 
extern void path_findingIface_set_has_vec(Path_finding* handle, sc_boolean value);
/*! Gets the value of the variable 'v_start_x' that is defined in the default interface scope. */ 
extern uint8_t path_findingIface_get_v_start_x(const Path_finding* handle);
/*! Sets the value of the variable 'v_start_x' that is defined in the default interface scope. */ 
extern void path_findingIface_set_v_start_x(Path_finding* handle, uint8_t value);
/*! Gets the value of the variable 'v_start_y' that is defined in the default interface scope. */ 
extern uint8_t path_findingIface_get_v_start_y(const Path_finding* handle);
/*! Sets the value of the variable 'v_start_y' that is defined in the default interface scope. */ 
extern void path_findingIface_set_v_start_y(Path_finding* handle, uint8_t value);
/*! Gets the value of the variable 'v_end_x' that is defined in the default interface scope. */ 
extern uint8_t path_findingIface_get_v_end_x(const Path_finding* handle);
/*! Sets the value of the variable 'v_end_x' that is defined in the default interface scope. */ 
extern void path_findingIface_set_v_end_x(Path_finding* handle, uint8_t value);
/*! Gets the value of the variable 'v_end_y' that is defined in the default interface scope. */ 
extern uint8_t path_findingIface_get_v_end_y(const Path_finding* handle);
/*! Sets the value of the variable 'v_end_y' that is defined in the default interface scope. */ 
extern void path_findingIface_set_v_end_y(Path_finding* handle, uint8_t value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean path_finding_isActive(const Path_finding* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean path_finding_isFinal(const Path_finding* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean path_finding_isStateActive(const Path_finding* handle, Path_findingStates state);


#ifdef __cplusplus
}
#endif 

#endif /* PATH_FINDING_H_ */

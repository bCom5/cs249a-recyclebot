/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef PATH_FINDING_2_H_
#define PATH_FINDING_2_H_

#include "../platform_kobuki.h"
#include "../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'path_finding_2'.
*/

/*! Define number of states in the state enum */

#define PATH_FINDING_2_STATE_COUNT 5

/*! Define dimension of the state configuration vector for orthogonal states. */
#define PATH_FINDING_2_MAX_ORTHOGONAL_STATES 1


/*! Define indices of states in the StateConfVector */
#define SCVI_PATH_FINDING_2_MAIN_REGION_STATION 0
#define SCVI_PATH_FINDING_2_MAIN_REGION_FOLLOWING 0
#define SCVI_PATH_FINDING_2_MAIN_REGION_STRAIGHT 0
#define SCVI_PATH_FINDING_2_MAIN_REGION_LEFT 0
#define SCVI_PATH_FINDING_2_MAIN_REGION_RIGHT 0

/*! Enumeration of all states */ 
typedef enum
{
	Path_finding_2_last_state,
	Path_finding_2_main_region_Station,
	Path_finding_2_main_region_Following,
	Path_finding_2_main_region_Straight,
	Path_finding_2_main_region_Left,
	Path_finding_2_main_region_Right
} Path_finding_2States;







/*! Type definition of the data structure for the Path_finding_2Iface interface scope. */
typedef struct
{
	int16_t speed_left;
	int16_t speed_right;
	sc_boolean has_vec;
	uint8_t v_start_x;
	uint8_t v_start_y;
	uint8_t v_end_x;
	uint8_t v_end_y;
} Path_finding_2Iface;




/*! 
 * Type definition of the data structure for the Path_finding_2 state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	Path_finding_2States stateConfVector[PATH_FINDING_2_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	Path_finding_2Iface iface;
} Path_finding_2;



/*! Initializes the Path_finding_2 state machine data structures. Must be called before first usage.*/
extern void path_finding_2_init(Path_finding_2* handle);

/*! Activates the state machine */
extern void path_finding_2_enter(Path_finding_2* handle);

/*! Deactivates the state machine */
extern void path_finding_2_exit(Path_finding_2* handle);

/*! Performs a 'run to completion' step. */
extern void path_finding_2_runCycle(Path_finding_2* handle);


/*! Gets the value of the variable 'speed_left' that is defined in the default interface scope. */ 
extern int16_t path_finding_2Iface_get_speed_left(const Path_finding_2* handle);
/*! Sets the value of the variable 'speed_left' that is defined in the default interface scope. */ 
extern void path_finding_2Iface_set_speed_left(Path_finding_2* handle, int16_t value);
/*! Gets the value of the variable 'speed_right' that is defined in the default interface scope. */ 
extern int16_t path_finding_2Iface_get_speed_right(const Path_finding_2* handle);
/*! Sets the value of the variable 'speed_right' that is defined in the default interface scope. */ 
extern void path_finding_2Iface_set_speed_right(Path_finding_2* handle, int16_t value);
/*! Gets the value of the variable 'has_vec' that is defined in the default interface scope. */ 
extern sc_boolean path_finding_2Iface_get_has_vec(const Path_finding_2* handle);
/*! Sets the value of the variable 'has_vec' that is defined in the default interface scope. */ 
extern void path_finding_2Iface_set_has_vec(Path_finding_2* handle, sc_boolean value);
/*! Gets the value of the variable 'v_start_x' that is defined in the default interface scope. */ 
extern uint8_t path_finding_2Iface_get_v_start_x(const Path_finding_2* handle);
/*! Sets the value of the variable 'v_start_x' that is defined in the default interface scope. */ 
extern void path_finding_2Iface_set_v_start_x(Path_finding_2* handle, uint8_t value);
/*! Gets the value of the variable 'v_start_y' that is defined in the default interface scope. */ 
extern uint8_t path_finding_2Iface_get_v_start_y(const Path_finding_2* handle);
/*! Sets the value of the variable 'v_start_y' that is defined in the default interface scope. */ 
extern void path_finding_2Iface_set_v_start_y(Path_finding_2* handle, uint8_t value);
/*! Gets the value of the variable 'v_end_x' that is defined in the default interface scope. */ 
extern uint8_t path_finding_2Iface_get_v_end_x(const Path_finding_2* handle);
/*! Sets the value of the variable 'v_end_x' that is defined in the default interface scope. */ 
extern void path_finding_2Iface_set_v_end_x(Path_finding_2* handle, uint8_t value);
/*! Gets the value of the variable 'v_end_y' that is defined in the default interface scope. */ 
extern uint8_t path_finding_2Iface_get_v_end_y(const Path_finding_2* handle);
/*! Sets the value of the variable 'v_end_y' that is defined in the default interface scope. */ 
extern void path_finding_2Iface_set_v_end_y(Path_finding_2* handle, uint8_t value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean path_finding_2_isActive(const Path_finding_2* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean path_finding_2_isFinal(const Path_finding_2* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean path_finding_2_isStateActive(const Path_finding_2* handle, Path_finding_2States state);


#ifdef __cplusplus
}
#endif 

#endif /* PATH_FINDING_2_H_ */

/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef ROTATE_H_
#define ROTATE_H_

#include "../platform_kobuki.h"
#include "../platform_bluetooth.h"
#include "../helper_funcs.h"
#include "../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'rotate'.
*/

/*! Define number of states in the state enum */

#define ROTATE_STATE_COUNT 3

/*! Define dimension of the state configuration vector for orthogonal states. */
#define ROTATE_MAX_ORTHOGONAL_STATES 1


/*! Define indices of states in the StateConfVector */
#define SCVI_ROTATE_MAIN_REGION_REST 0
#define SCVI_ROTATE_MAIN_REGION_ROTATING_LEFT 0
#define SCVI_ROTATE_MAIN_REGION_ROTATING_RIGHT 0

/*! Enumeration of all states */ 
typedef enum
{
	Rotate_last_state,
	Rotate_main_region_Rest,
	Rotate_main_region_Rotating_Left,
	Rotate_main_region_Rotating_Right
} RotateStates;







/*! Type definition of the data structure for the RotateIface interface scope. */
typedef struct
{
	float rotation;
	float rotation_diff;
	float rotation_delta;
} RotateIface;




/*! 
 * Type definition of the data structure for the Rotate state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	RotateStates stateConfVector[ROTATE_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	RotateIface iface;
} Rotate;



/*! Initializes the Rotate state machine data structures. Must be called before first usage.*/
extern void rotate_init(Rotate* handle);

/*! Activates the state machine */
extern void rotate_enter(Rotate* handle);

/*! Deactivates the state machine */
extern void rotate_exit(Rotate* handle);

/*! Performs a 'run to completion' step. */
extern void rotate_runCycle(Rotate* handle);


/*! Gets the value of the variable 'rotation' that is defined in the default interface scope. */ 
extern float rotateIface_get_rotation(const Rotate* handle);
/*! Sets the value of the variable 'rotation' that is defined in the default interface scope. */ 
extern void rotateIface_set_rotation(Rotate* handle, float value);
/*! Gets the value of the variable 'rotation_diff' that is defined in the default interface scope. */ 
extern float rotateIface_get_rotation_diff(const Rotate* handle);
/*! Sets the value of the variable 'rotation_diff' that is defined in the default interface scope. */ 
extern void rotateIface_set_rotation_diff(Rotate* handle, float value);
/*! Gets the value of the variable 'rotation_delta' that is defined in the default interface scope. */ 
extern float rotateIface_get_rotation_delta(const Rotate* handle);
/*! Sets the value of the variable 'rotation_delta' that is defined in the default interface scope. */ 
extern void rotateIface_set_rotation_delta(Rotate* handle, float value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean rotate_isActive(const Rotate* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean rotate_isFinal(const Rotate* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean rotate_isStateActive(const Rotate* handle, RotateStates state);


#ifdef __cplusplus
}
#endif 

#endif /* ROTATE_H_ */

/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef ROBOT_TEMPLATE_H_
#define ROBOT_TEMPLATE_H_

#include "../states.h"
#include "../helper_funcs.h"
#include "../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'robot_template'.
*/

/*! Define number of states in the state enum */

#define ROBOT_TEMPLATE_STATE_COUNT 4

/*! Define dimension of the state configuration vector for orthogonal states. */
#define ROBOT_TEMPLATE_MAX_ORTHOGONAL_STATES 1


/*! Define indices of states in the StateConfVector */
#define SCVI_ROBOT_TEMPLATE_MAIN_REGION_OFF 0
#define SCVI_ROBOT_TEMPLATE_MAIN_REGION_DRIVING 0
#define SCVI_ROBOT_TEMPLATE_MAIN_REGION_LEFT 0
#define SCVI_ROBOT_TEMPLATE_MAIN_REGION_RIGHT 0

/*! Enumeration of all states */ 
typedef enum
{
	Robot_template_last_state,
	Robot_template_main_region_OFF,
	Robot_template_main_region_DRIVING,
	Robot_template_main_region_LEFT,
	Robot_template_main_region_RIGHT
} Robot_templateStates;







/*! Type definition of the data structure for the Robot_templateIface interface scope. */
typedef struct
{
	sc_boolean button;
	uint16_t prev_encoder;
	float angle;
	sc_boolean cliffLeft;
	sc_boolean cliffRight;
	float theta;
	float psi;
	float dist;
	float x_off;
} Robot_templateIface;




/*! 
 * Type definition of the data structure for the Robot_template state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	Robot_templateStates stateConfVector[ROBOT_TEMPLATE_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	Robot_templateIface iface;
} Robot_template;



/*! Initializes the Robot_template state machine data structures. Must be called before first usage.*/
extern void robot_template_init(Robot_template* handle);

/*! Activates the state machine */
extern void robot_template_enter(Robot_template* handle);

/*! Deactivates the state machine */
extern void robot_template_exit(Robot_template* handle);

/*! Performs a 'run to completion' step. */
extern void robot_template_runCycle(Robot_template* handle);


/*! Gets the value of the variable 'button' that is defined in the default interface scope. */ 
extern sc_boolean robot_templateIface_get_button(const Robot_template* handle);
/*! Sets the value of the variable 'button' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_button(Robot_template* handle, sc_boolean value);
/*! Gets the value of the variable 'prev_encoder' that is defined in the default interface scope. */ 
extern uint16_t robot_templateIface_get_prev_encoder(const Robot_template* handle);
/*! Sets the value of the variable 'prev_encoder' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_prev_encoder(Robot_template* handle, uint16_t value);
/*! Gets the value of the variable 'angle' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_angle(const Robot_template* handle);
/*! Sets the value of the variable 'angle' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_angle(Robot_template* handle, float value);
/*! Gets the value of the variable 'cliffLeft' that is defined in the default interface scope. */ 
extern sc_boolean robot_templateIface_get_cliffLeft(const Robot_template* handle);
/*! Sets the value of the variable 'cliffLeft' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_cliffLeft(Robot_template* handle, sc_boolean value);
/*! Gets the value of the variable 'cliffRight' that is defined in the default interface scope. */ 
extern sc_boolean robot_templateIface_get_cliffRight(const Robot_template* handle);
/*! Sets the value of the variable 'cliffRight' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_cliffRight(Robot_template* handle, sc_boolean value);
/*! Gets the value of the variable 'theta' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_theta(const Robot_template* handle);
/*! Sets the value of the variable 'theta' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_theta(Robot_template* handle, float value);
/*! Gets the value of the variable 'psi' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_psi(const Robot_template* handle);
/*! Sets the value of the variable 'psi' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_psi(Robot_template* handle, float value);
/*! Gets the value of the variable 'dist' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_dist(const Robot_template* handle);
/*! Sets the value of the variable 'dist' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_dist(Robot_template* handle, float value);
/*! Gets the value of the variable 'x_off' that is defined in the default interface scope. */ 
extern float robot_templateIface_get_x_off(const Robot_template* handle);
/*! Sets the value of the variable 'x_off' that is defined in the default interface scope. */ 
extern void robot_templateIface_set_x_off(Robot_template* handle, float value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean robot_template_isActive(const Robot_template* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean robot_template_isFinal(const Robot_template* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean robot_template_isStateActive(const Robot_template* handle, Robot_templateStates state);


#ifdef __cplusplus
}
#endif 

#endif /* ROBOT_TEMPLATE_H_ */
